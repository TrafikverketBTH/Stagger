/* The following code was generated by JFlex 1.6.1 */

package se.su.ling.stagger;
import java.util.*;
import java.io.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>/home/mun/phd/projects/companies/TRV/ResearchTracks/Track1/nlp/tools/stagger/MyStagger/src/main/java/SwedishTokenizer.flex</tt>
 */
public class SwedishTokenizer extends Tokenizer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\13\1\15\1\114\1\114\1\14\22\0\1\103\1\52\1\55"+
    "\1\30\1\37\1\31\1\30\1\36\1\46\1\42\1\55\1\31\1\51"+
    "\1\27\1\26\1\24\1\20\2\112\1\45\6\113\1\6\1\34\1\44"+
    "\1\41\1\50\1\53\1\32\1\102\1\105\1\76\1\5\1\73\1\23"+
    "\1\101\1\21\1\11\1\33\1\110\1\106\1\77\1\74\1\40\1\22"+
    "\1\33\1\100\1\10\1\3\1\75\1\111\1\25\1\104\1\47\1\33"+
    "\1\1\1\30\1\12\1\43\1\7\1\55\1\102\1\105\1\76\1\5"+
    "\1\73\1\23\1\101\1\21\1\11\1\33\1\110\1\106\1\77\1\74"+
    "\1\40\1\22\1\33\1\100\1\10\1\3\1\75\1\111\1\25\1\35"+
    "\1\47\1\33\3\55\1\30\6\0\1\16\32\0\1\13\37\55\27\60"+
    "\1\55\37\60\1\55\70\60\2\4\115\60\1\2\u01f0\0\220\61\u0200\0"+
    "\140\62\12\63\206\62\12\63\6\62\120\0\60\62\100\0\12\17\u0136\0"+
    "\146\64\12\65\20\64\146\0\12\17\166\0\12\17\166\0\12\17\166\0"+
    "\12\17\166\0\12\17\166\0\12\17\166\0\12\17\166\0\12\17\166\0"+
    "\12\17\140\0\12\17\166\0\12\17\106\0\12\17\u0116\0\12\17\106\0"+
    "\12\17\146\0\u0100\67\u05e0\0\12\17\46\0\12\17\u012c\0\12\17\200\0"+
    "\12\17\246\0\12\17\6\0\12\17\266\0\12\17\126\0\12\17\206\0"+
    "\12\17\6\0\12\17\166\0\60\64\u0200\0\u0100\61\16\13\2\0\6\54"+
    "\22\55\1\57\1\57\33\55\345\0\1\107\u0ed5\0\1\56\37\55\40\0"+
    "\300\66\60\0\140\67\u0270\0\u19c0\70\100\0\u5200\70\u0620\0\12\17\u02a6\0"+
    "\12\17\6\0\40\64\12\17\126\0\40\67\120\0\12\17\26\0\12\17"+
    "\126\0\12\17\u0196\0\12\17\u2bb6\0\120\67\100\72\60\71\u0790\72\u1b50\0"+
    "\u02b0\62\160\0\220\62\20\0\12\17\113\0\73\66\u0500\0\12\17\u0bbc\0"+
    "\12\17\200\0\12\17\74\0\12\17\220\0\12\17\u0116\0\12\17\u01d6\0"+
    "\12\17\u0176\0\12\17\146\0\12\17\u0216\0\12\17\u5176\0\12\17\346\0"+
    "\12\17\u6c74\0\62\17\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u280f\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\3\3\2\2\2\3\1\2\1\4"+
    "\1\0\1\5\2\6\2\3\1\2\1\3\1\7\1\10"+
    "\1\2\1\3\1\2\1\3\4\2\1\6\2\2\1\7"+
    "\1\10\2\2\1\11\1\12\1\6\1\13\1\6\1\14"+
    "\1\15\1\16\1\1\4\3\1\6\2\0\1\3\2\0"+
    "\1\3\1\0\1\3\1\0\2\3\1\0\1\17\1\0"+
    "\1\3\1\17\2\0\1\17\1\2\1\0\1\20\1\0"+
    "\1\21\3\0\2\6\2\3\1\0\1\3\2\0\2\3"+
    "\1\6\1\0\1\2\1\0\1\17\1\3\2\0\1\3"+
    "\1\0\1\3\2\0\1\17\1\0\1\17\1\2\1\0"+
    "\1\17\2\0\3\3\2\0\1\3\2\0\1\3\1\0"+
    "\2\3\14\0\3\6\1\3\3\0\2\3\1\17\2\0"+
    "\1\3\1\17\4\0\1\17\1\22\1\3\1\0\1\3"+
    "\3\0\1\6\1\0\1\3\2\23\6\0\1\3\1\0"+
    "\1\3\3\0\1\3\4\0\1\23\1\22\1\0\1\24"+
    "\2\0\1\23\2\0\1\24\2\23\1\25\1\24";

  private static int [] zzUnpackAction() {
    int [] result = new int[195];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\115\0\232\0\347\0\u0134\0\u0181\0\u01ce\0\u021b"+
    "\0\u0268\0\u02b5\0\115\0\u0302\0\u034f\0\u039c\0\u03e9\0\u0436"+
    "\0\u0483\0\u04d0\0\u051d\0\u056a\0\u05b7\0\u0604\0\u0651\0\u069e"+
    "\0\u06eb\0\u0738\0\u0785\0\u07d2\0\u081f\0\u086c\0\u08b9\0\u0906"+
    "\0\u0953\0\u09a0\0\115\0\u0302\0\u039c\0\u09ed\0\u0a3a\0\u0a87"+
    "\0\u0ad4\0\u0b21\0\115\0\115\0\115\0\u0b6e\0\u0bbb\0\u0c08"+
    "\0\u0c55\0\u0ca2\0\u0cef\0\u0d3c\0\u0d89\0\u0dd6\0\u0e23\0\u021b"+
    "\0\u0e70\0\u0ebd\0\u0f0a\0\u0f57\0\u0fa4\0\u0ff1\0\u103e\0\u0d89"+
    "\0\u108b\0\u10d8\0\115\0\u06eb\0\u07d2\0\u1125\0\u1125\0\u1172"+
    "\0\u0302\0\u11bf\0\u120c\0\u1259\0\u12a6\0\u12f3\0\u0e70\0\u1340"+
    "\0\u138d\0\u13da\0\u1427\0\u1474\0\u14c1\0\u150e\0\u155b\0\u15a8"+
    "\0\u15f5\0\u1642\0\u168f\0\u1125\0\u16dc\0\u1729\0\u1776\0\u17c3"+
    "\0\u1810\0\u185d\0\u18aa\0\u18f7\0\u1944\0\u0785\0\u1991\0\u081f"+
    "\0\u19de\0\u1a2b\0\u1a78\0\u1ac5\0\u1b12\0\u1b5f\0\u1bac\0\u1bf9"+
    "\0\u1c46\0\u1c93\0\u1ce0\0\u1d2d\0\u1d7a\0\115\0\u1dc7\0\u0e23"+
    "\0\u1e14\0\u1e61\0\u1eae\0\u1efb\0\u1f48\0\u1f95\0\u1fe2\0\u202f"+
    "\0\u207c\0\u20c9\0\u2116\0\u2163\0\u21b0\0\u1259\0\u1dc7\0\u12f3"+
    "\0\u21fd\0\u224a\0\u2297\0\u22e4\0\u2331\0\u237e\0\u23cb\0\u2418"+
    "\0\u2465\0\u24b2\0\u021b\0\u24ff\0\u254c\0\u2599\0\u25e6\0\u2633"+
    "\0\u2680\0\u108b\0\u26cd\0\u271a\0\u2767\0\u27b4\0\u2801\0\u1e14"+
    "\0\u284e\0\u289b\0\115\0\u021b\0\u28e8\0\u2935\0\u2982\0\u29cf"+
    "\0\u2a1c\0\u2a69\0\u2ab6\0\u2b03\0\u2b50\0\u2b9d\0\u2bea\0\u2c37"+
    "\0\u021b\0\u2c84\0\u2cd1\0\u2d1e\0\u2d6b\0\u2db8\0\u2e05\0\u2e52"+
    "\0\u2e9f\0\u2eec\0\u2f39\0\u2f86\0\u2fd3\0\u3020\0\u306d\0\u30ba"+
    "\0\u3107\0\115\0\u202f";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[195];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\4\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\2\16\1\17\1\20"+
    "\1\21\1\6\1\22\1\23\1\24\1\25\1\26\1\13"+
    "\1\10\1\13\1\12\1\27\1\30\1\13\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\12\1\13"+
    "\1\41\2\42\1\43\1\13\1\44\1\45\1\4\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56"+
    "\1\2\1\57\2\12\1\60\1\61\3\12\1\14\1\12"+
    "\1\62\1\12\1\2\2\12\1\63\1\37\120\0\1\64"+
    "\5\0\1\64\106\0\4\4\1\65\1\0\2\4\6\0"+
    "\4\4\1\0\1\4\1\0\1\66\3\0\1\4\1\0"+
    "\1\4\1\67\1\0\1\4\4\0\1\4\1\0\1\4"+
    "\10\0\1\4\12\0\10\4\1\0\3\4\1\0\4\4"+
    "\3\0\1\4\1\12\1\4\1\12\1\65\1\70\2\12"+
    "\6\0\1\71\3\12\1\0\1\12\1\72\1\73\1\0"+
    "\1\70\1\74\1\12\1\0\1\12\1\67\1\0\1\75"+
    "\4\0\1\71\1\0\1\12\10\0\1\4\12\0\1\76"+
    "\7\12\1\77\3\12\1\0\2\12\2\71\3\0\1\4"+
    "\1\12\1\4\1\6\1\100\1\70\1\11\1\12\6\0"+
    "\1\71\1\12\1\6\1\12\1\0\1\12\1\101\1\102"+
    "\1\0\1\70\1\74\1\12\1\103\1\12\1\67\1\104"+
    "\1\12\1\103\1\105\2\0\1\71\1\105\1\12\10\0"+
    "\1\4\12\0\10\12\1\0\3\12\1\0\2\12\2\71"+
    "\6\0\1\106\2\0\1\106\11\0\1\106\4\0\1\107"+
    "\6\0\1\110\1\106\1\103\1\0\1\106\3\0\1\106"+
    "\51\0\1\70\1\0\1\70\1\0\3\70\6\0\4\70"+
    "\1\0\3\70\1\0\1\70\1\74\1\70\1\0\1\70"+
    "\2\0\1\70\4\0\1\70\1\0\1\70\23\0\10\70"+
    "\1\0\3\70\1\0\4\70\3\0\1\4\1\12\1\4"+
    "\1\11\1\100\1\70\1\11\1\12\6\0\1\71\1\12"+
    "\1\11\1\12\1\0\1\12\1\101\1\102\1\0\1\70"+
    "\1\74\1\12\1\103\1\12\1\67\1\104\1\12\1\0"+
    "\1\104\2\0\1\71\1\104\1\12\10\0\1\4\12\0"+
    "\10\12\1\0\3\12\1\0\2\12\2\71\3\0\1\4"+
    "\1\12\1\4\1\12\1\65\1\70\2\12\6\0\1\71"+
    "\3\12\1\0\1\12\1\101\1\73\1\0\1\70\1\74"+
    "\1\12\1\0\1\12\1\67\1\0\1\12\4\0\1\71"+
    "\1\0\1\12\10\0\1\4\12\0\10\12\1\0\3\12"+
    "\1\0\2\12\2\71\14\0\1\111\1\15\2\16\37\0"+
    "\1\111\1\16\23\0\1\111\26\0\1\16\112\0\1\16"+
    "\1\112\2\113\37\0\1\16\1\113\23\0\1\16\30\0"+
    "\2\17\5\0\1\114\16\0\1\17\3\0\1\114\11\0"+
    "\1\17\1\0\1\17\24\0\2\17\3\0\1\4\1\71"+
    "\1\4\1\71\1\115\1\70\2\71\5\0\1\17\1\20"+
    "\3\71\1\0\1\71\1\116\1\73\1\0\1\70\1\74"+
    "\1\71\1\0\1\71\1\67\1\0\1\71\4\0\1\20"+
    "\1\0\1\71\1\0\1\114\6\0\1\4\2\0\1\17"+
    "\1\0\1\17\5\0\1\117\7\71\1\0\3\71\1\0"+
    "\2\71\1\120\1\20\3\0\1\4\1\121\1\4\1\12"+
    "\1\65\1\70\2\12\6\0\1\71\3\12\1\0\1\12"+
    "\1\101\1\73\1\0\1\70\1\74\1\12\1\0\1\12"+
    "\1\67\1\0\1\12\4\0\1\71\1\0\1\12\10\0"+
    "\1\4\12\0\10\12\1\0\3\12\1\0\2\12\2\71"+
    "\3\0\1\4\1\122\1\4\1\12\1\65\1\70\2\12"+
    "\6\0\1\71\3\12\1\0\1\12\1\123\1\73\1\0"+
    "\1\70\1\74\1\12\1\0\1\12\1\67\1\0\1\12"+
    "\4\0\1\71\1\0\1\12\10\0\1\4\12\0\5\12"+
    "\1\124\2\12\1\125\3\12\1\126\1\127\1\12\2\71"+
    "\25\0\1\23\72\0\1\4\1\12\1\4\1\12\1\65"+
    "\1\70\2\12\6\0\1\71\3\12\1\0\1\130\1\101"+
    "\1\73\1\0\1\70\1\74\1\12\1\0\1\12\1\67"+
    "\1\0\1\12\4\0\1\71\1\0\1\12\10\0\1\4"+
    "\12\0\10\12\1\0\3\12\1\0\2\12\2\71\4\0"+
    "\1\70\1\0\1\70\1\0\3\70\6\0\4\70\1\0"+
    "\1\70\1\25\1\70\1\0\1\70\1\74\1\70\1\0"+
    "\1\70\2\0\1\70\4\0\1\70\1\0\1\70\2\0"+
    "\2\42\17\0\10\70\1\0\3\70\1\0\4\70\4\0"+
    "\1\70\1\0\1\70\1\0\3\70\5\0\1\17\1\131"+
    "\3\70\1\0\2\70\1\132\1\0\1\70\1\74\1\70"+
    "\1\0\1\70\2\0\1\70\4\0\1\131\1\0\1\70"+
    "\1\133\12\0\1\17\1\0\1\17\5\0\10\70\1\0"+
    "\3\70\1\0\2\70\2\131\6\0\1\106\2\0\1\106"+
    "\11\0\1\106\4\0\1\134\6\0\1\110\1\106\1\103"+
    "\1\0\1\106\3\0\1\106\50\0\1\4\1\12\1\4"+
    "\1\135\1\65\1\70\1\135\1\12\6\0\1\71\1\12"+
    "\1\135\1\12\1\0\1\12\1\101\1\136\1\0\1\70"+
    "\1\74\1\12\1\0\1\12\1\137\1\106\1\12\1\0"+
    "\1\106\2\0\1\71\1\106\1\12\10\0\1\4\12\0"+
    "\10\12\1\0\3\12\1\0\2\12\2\71\6\0\1\104"+
    "\1\103\1\0\1\104\11\0\1\104\4\0\1\140\4\0"+
    "\1\103\2\0\1\104\2\0\1\104\3\0\1\104\50\0"+
    "\1\141\1\12\1\4\1\12\1\65\1\142\1\143\1\12"+
    "\6\0\1\71\3\12\1\0\1\12\1\144\1\73\1\0"+
    "\1\70\1\74\1\12\1\0\1\12\1\67\1\0\1\12"+
    "\4\0\1\71\1\0\1\12\10\0\1\4\12\0\10\12"+
    "\1\145\3\12\1\0\2\12\2\71\6\0\1\146\14\0"+
    "\1\146\17\0\1\146\3\0\1\146\53\0\1\105\1\103"+
    "\1\0\1\104\11\0\1\105\4\0\1\140\4\0\1\103"+
    "\2\0\1\104\1\0\1\103\1\105\3\0\1\105\55\0"+
    "\1\147\33\0\1\150\100\0\1\151\14\0\1\152\1\153"+
    "\51\0\1\4\1\71\1\4\1\71\1\115\1\70\2\71"+
    "\5\0\1\17\1\37\3\71\1\0\1\71\1\154\1\73"+
    "\1\0\1\70\1\74\1\71\1\0\1\71\1\67\1\0"+
    "\1\71\4\0\1\37\1\0\1\71\1\0\1\114\6\0"+
    "\1\4\2\0\1\17\1\0\1\17\5\0\1\117\7\71"+
    "\1\0\3\71\1\0\2\71\1\63\1\37\6\0\1\105"+
    "\1\103\1\0\1\104\11\0\1\105\4\0\1\140\4\0"+
    "\1\103\2\0\1\104\1\0\1\103\1\105\3\0\1\105"+
    "\1\155\116\0\1\41\115\0\2\42\122\0\1\46\115\0"+
    "\2\47\50\0\2\17\5\0\1\114\16\0\1\17\3\0"+
    "\1\114\10\0\1\47\1\50\1\0\1\17\24\0\2\17"+
    "\65\0\2\51\46\0\2\17\5\0\1\114\16\0\1\17"+
    "\3\0\1\114\11\0\1\17\1\51\1\52\24\0\2\17"+
    "\72\0\2\55\24\0\1\4\1\156\1\4\1\12\1\65"+
    "\1\70\2\12\6\0\1\71\3\12\1\0\1\12\1\123"+
    "\1\73\1\0\1\70\1\74\1\12\1\0\1\157\1\67"+
    "\1\0\1\12\4\0\1\71\1\0\1\12\10\0\1\4"+
    "\12\0\10\12\1\125\1\157\2\12\1\126\1\127\1\12"+
    "\2\71\3\0\1\4\1\12\1\4\1\12\1\65\1\70"+
    "\2\12\6\0\1\71\3\12\1\0\1\12\1\101\1\73"+
    "\1\0\1\70\1\74\1\12\1\0\1\12\1\67\1\0"+
    "\1\12\4\0\1\71\1\0\1\12\10\0\1\4\12\0"+
    "\7\12\1\157\1\0\3\12\1\0\2\12\2\71\3\0"+
    "\1\4\1\12\1\4\1\12\1\65\1\70\2\12\6\0"+
    "\1\71\2\12\1\160\1\0\1\12\1\161\1\73\1\0"+
    "\1\70\1\74\1\12\1\0\1\12\1\67\1\0\1\12"+
    "\4\0\1\71\1\0\1\12\10\0\1\4\12\0\4\12"+
    "\1\157\3\12\1\162\3\12\1\0\2\12\2\71\3\0"+
    "\1\4\1\12\1\4\1\12\1\65\1\70\2\12\6\0"+
    "\1\71\3\12\1\0\1\12\1\101\1\73\1\0\1\70"+
    "\1\74\1\12\1\0\1\12\1\67\1\0\1\12\4\0"+
    "\1\71\1\0\1\12\10\0\1\4\12\0\10\12\1\0"+
    "\2\12\1\163\1\0\2\12\2\71\3\0\1\4\1\71"+
    "\1\4\1\71\1\164\1\70\2\71\5\0\1\17\1\37"+
    "\3\71\1\0\1\71\1\154\1\73\1\0\1\70\1\74"+
    "\1\71\1\0\1\71\1\67\1\0\1\71\4\0\1\37"+
    "\1\0\1\71\1\0\1\114\6\0\1\4\2\0\1\17"+
    "\1\0\1\17\5\0\1\117\6\71\1\117\1\0\3\71"+
    "\1\0\2\71\1\63\1\37\4\0\1\165\113\0\1\166"+
    "\5\0\1\166\62\0\1\167\1\170\5\0\1\171\14\0"+
    "\4\4\2\0\2\4\6\0\4\4\1\0\1\4\5\0"+
    "\1\4\1\0\1\4\2\0\1\4\4\0\1\4\1\0"+
    "\1\4\10\0\1\4\12\0\10\4\1\0\3\4\1\0"+
    "\4\4\3\0\1\166\5\0\1\166\106\0\1\4\1\71"+
    "\1\4\1\71\1\65\1\70\2\71\6\0\4\71\1\0"+
    "\1\71\1\70\1\73\1\0\1\70\1\74\1\71\1\0"+
    "\1\71\1\67\1\0\1\71\4\0\1\71\1\0\1\71"+
    "\10\0\1\4\12\0\10\71\1\0\3\71\1\0\4\71"+
    "\3\0\1\172\1\70\1\0\1\70\1\0\1\70\1\173"+
    "\1\70\6\0\4\70\1\0\3\70\1\0\1\70\1\74"+
    "\1\70\1\0\1\70\2\0\1\174\4\0\1\70\1\0"+
    "\1\70\23\0\1\175\1\176\1\70\1\177\4\70\1\77"+
    "\3\70\1\0\4\70\3\0\1\4\1\71\1\4\1\71"+
    "\1\0\1\70\2\71\6\0\4\71\1\0\1\71\2\70"+
    "\1\0\1\70\1\74\1\71\1\0\1\71\2\0\1\71"+
    "\4\0\1\71\1\0\1\71\10\0\1\4\12\0\10\71"+
    "\1\0\3\71\1\0\4\71\4\0\1\200\1\0\1\200"+
    "\2\0\2\200\6\0\4\200\1\0\3\200\3\0\1\200"+
    "\1\0\1\200\2\0\1\200\4\0\1\200\1\0\1\200"+
    "\23\0\10\200\1\0\3\200\1\0\4\200\3\0\1\4"+
    "\1\12\1\4\1\12\1\65\1\70\2\12\6\0\1\71"+
    "\3\12\1\0\1\12\1\201\1\73\1\0\1\70\1\74"+
    "\1\12\1\0\1\12\1\67\1\0\1\12\4\0\1\71"+
    "\1\0\1\12\10\0\1\4\12\0\4\12\1\157\3\12"+
    "\1\202\3\12\1\0\2\12\2\71\3\0\1\4\1\12"+
    "\1\4\1\12\1\65\1\70\2\12\6\0\1\71\3\12"+
    "\1\0\1\12\1\101\1\73\1\0\1\70\1\74\1\12"+
    "\1\0\1\157\1\67\1\0\1\12\4\0\1\71\1\0"+
    "\1\12\10\0\1\4\12\0\10\12\1\0\1\157\2\12"+
    "\1\0\2\12\2\71\41\0\1\203\32\0\1\204\23\0"+
    "\1\172\1\70\1\0\1\70\1\0\1\70\1\173\1\70"+
    "\6\0\4\70\1\0\3\70\1\0\1\70\1\74\1\70"+
    "\1\0\1\70\2\0\1\205\4\0\1\70\1\0\1\70"+
    "\23\0\1\70\1\176\1\70\1\177\4\70\1\0\3\70"+
    "\1\0\4\70\3\0\1\4\1\71\1\4\1\71\1\103"+
    "\1\70\2\71\6\0\4\71\1\0\1\71\2\70\1\0"+
    "\1\70\1\74\1\71\1\103\1\71\2\0\1\71\4\0"+
    "\1\71\1\0\1\71\10\0\1\4\12\0\10\71\1\0"+
    "\3\71\1\0\4\71\6\0\1\106\2\0\1\106\11\0"+
    "\1\106\14\0\1\106\2\0\1\106\3\0\1\106\53\0"+
    "\1\106\2\0\1\106\11\0\1\106\4\0\1\134\7\0"+
    "\1\106\2\0\1\106\3\0\1\106\63\0\1\113\112\0"+
    "\1\113\1\112\2\113\37\0\2\113\23\0\1\113\30\0"+
    "\2\206\24\0\1\206\15\0\1\206\1\0\1\206\24\0"+
    "\2\206\3\0\1\166\5\0\1\166\62\0\1\207\1\170"+
    "\5\0\1\171\15\0\1\70\1\0\1\70\1\0\3\70"+
    "\5\0\1\206\1\210\3\70\1\0\3\70\1\0\1\70"+
    "\1\74\1\70\1\0\1\70\2\0\1\70\4\0\1\210"+
    "\1\0\1\70\13\0\1\206\1\0\1\206\5\0\10\70"+
    "\1\0\3\70\1\0\2\70\2\210\3\0\1\4\1\71"+
    "\1\4\1\71\1\164\1\70\2\71\5\0\1\17\1\20"+
    "\3\71\1\0\1\71\1\116\1\73\1\0\1\70\1\74"+
    "\1\71\1\0\1\71\1\67\1\0\1\71\4\0\1\20"+
    "\1\0\1\71\1\0\1\114\6\0\1\4\2\0\1\17"+
    "\1\0\1\17\5\0\1\117\6\71\1\117\1\0\3\71"+
    "\1\0\2\71\1\120\1\20\3\0\1\4\1\122\1\4"+
    "\1\12\1\65\1\70\2\12\6\0\1\71\3\12\1\0"+
    "\1\12\1\101\1\73\1\0\1\70\1\74\1\12\1\0"+
    "\1\12\1\67\1\0\1\12\4\0\1\71\1\0\1\12"+
    "\10\0\1\4\12\0\10\12\1\0\3\12\1\0\2\12"+
    "\2\71\3\0\1\4\1\12\1\4\1\12\1\65\1\70"+
    "\2\12\6\0\1\71\1\12\1\211\1\12\1\0\1\12"+
    "\1\101\1\73\1\0\1\70\1\74\1\12\1\0\1\12"+
    "\1\67\1\0\1\12\4\0\1\71\1\0\1\12\10\0"+
    "\1\4\12\0\10\12\1\0\3\12\1\0\2\12\2\71"+
    "\3\0\1\172\1\70\1\0\1\70\1\0\1\70\1\173"+
    "\1\70\6\0\4\70\1\0\3\70\1\0\1\70\1\74"+
    "\1\70\1\0\1\70\2\0\1\205\4\0\1\70\1\0"+
    "\1\70\23\0\1\70\1\176\1\70\1\177\4\70\1\125"+
    "\3\70\1\126\1\212\3\70\3\0\1\4\1\12\1\4"+
    "\1\12\1\65\1\70\2\12\6\0\1\71\3\12\1\0"+
    "\1\12\1\213\1\73\1\0\1\70\1\74\1\12\1\0"+
    "\1\12\1\67\1\0\1\75\4\0\1\71\1\0\1\12"+
    "\10\0\1\4\12\0\10\12\1\214\3\12\1\0\2\12"+
    "\2\71\110\0\2\126\104\0\1\215\16\0\1\4\1\12"+
    "\1\4\1\12\1\65\1\70\2\12\6\0\1\71\3\12"+
    "\1\0\1\12\1\101\1\73\1\0\1\70\1\74\1\12"+
    "\1\0\1\12\1\67\1\0\1\12\4\0\1\71\1\0"+
    "\1\12\10\0\1\4\12\0\5\12\1\157\2\12\1\0"+
    "\3\12\1\0\2\12\2\71\3\0\1\4\1\12\1\4"+
    "\1\12\1\65\1\70\2\12\6\0\1\71\3\12\1\0"+
    "\1\216\1\101\1\73\1\0\1\70\1\74\1\12\1\0"+
    "\1\12\1\67\1\0\1\12\4\0\1\71\1\0\1\12"+
    "\10\0\1\4\12\0\10\12\1\0\3\12\1\0\2\12"+
    "\2\71\4\0\1\70\1\0\1\70\1\0\3\70\5\0"+
    "\1\17\1\131\3\70\1\0\1\70\1\116\1\70\1\0"+
    "\1\70\1\74\1\70\1\0\1\70\2\0\1\70\4\0"+
    "\1\131\1\0\1\70\1\0\1\114\11\0\1\17\1\0"+
    "\1\17\5\0\10\70\1\0\3\70\1\0\2\70\2\131"+
    "\4\0\1\70\1\0\1\70\1\0\3\70\6\0\4\70"+
    "\1\0\2\70\1\132\1\0\1\70\1\74\1\70\1\0"+
    "\1\70\2\0\1\70\4\0\1\70\1\0\1\70\1\133"+
    "\22\0\10\70\1\0\3\70\1\0\4\70\51\0\1\133"+
    "\46\0\1\4\1\12\1\4\1\135\1\65\1\70\1\135"+
    "\1\12\6\0\1\71\1\12\1\135\1\12\1\0\1\12"+
    "\1\101\1\73\1\0\1\70\1\74\1\12\1\0\1\12"+
    "\1\67\1\106\1\12\1\0\1\106\2\0\1\71\1\106"+
    "\1\12\10\0\1\4\12\0\10\12\1\0\3\12\1\0"+
    "\2\12\2\71\3\0\1\4\1\71\1\4\1\217\1\0"+
    "\1\70\1\217\1\71\6\0\2\71\1\217\1\71\1\0"+
    "\1\71\2\70\1\0\1\70\1\74\1\71\1\0\1\71"+
    "\1\0\1\106\1\71\1\0\1\106\2\0\1\71\1\106"+
    "\1\71\10\0\1\4\12\0\10\71\1\0\3\71\1\0"+
    "\4\71\3\0\1\166\2\0\1\106\2\0\1\106\11\0"+
    "\1\106\4\0\1\134\7\0\1\106\2\0\1\106\3\0"+
    "\1\106\54\0\1\103\25\0\1\103\62\0\4\4\1\65"+
    "\1\0\2\4\6\0\4\4\1\0\1\4\1\220\1\66"+
    "\3\0\1\4\1\0\1\4\1\67\1\0\1\4\4\0"+
    "\1\4\1\0\1\4\10\0\1\4\12\0\10\4\1\221"+
    "\3\4\1\0\1\4\1\222\2\4\4\0\1\70\1\0"+
    "\1\70\1\0\3\70\6\0\4\70\1\0\3\70\1\0"+
    "\1\70\1\74\1\70\1\0\1\70\2\0\1\223\4\0"+
    "\1\70\1\0\1\70\23\0\10\70\1\0\3\70\1\0"+
    "\4\70\3\0\1\4\1\12\1\4\1\12\1\65\1\70"+
    "\2\12\6\0\1\71\3\12\1\0\1\12\1\224\1\73"+
    "\1\0\1\70\1\74\1\12\1\0\1\12\1\67\1\0"+
    "\1\12\4\0\1\71\1\0\1\12\10\0\1\4\12\0"+
    "\10\12\1\221\3\12\1\0\1\12\1\157\2\71\3\0"+
    "\1\225\1\70\1\0\1\70\1\0\1\70\1\226\1\70"+
    "\6\0\4\70\1\0\3\70\1\0\1\70\1\74\1\70"+
    "\1\0\1\70\2\0\1\205\4\0\1\70\1\0\1\70"+
    "\23\0\1\70\1\176\1\70\1\177\4\70\1\145\3\70"+
    "\1\0\4\70\3\0\1\227\5\0\1\227\113\0\1\147"+
    "\33\0\1\230\100\0\1\151\114\0\1\151\14\0\1\152"+
    "\115\0\1\153\52\0\1\70\1\0\1\70\1\0\3\70"+
    "\5\0\1\206\1\210\3\70\1\0\3\70\1\0\1\70"+
    "\1\74\1\70\1\0\1\70\2\0\1\70\4\0\1\231"+
    "\1\0\1\70\13\0\1\206\1\0\1\206\5\0\10\70"+
    "\1\0\3\70\1\0\2\70\2\231\43\0\1\103\54\0"+
    "\1\4\1\12\1\4\1\12\1\65\1\70\2\12\6\0"+
    "\1\71\3\12\1\0\1\12\1\101\1\73\1\0\1\70"+
    "\1\74\1\12\1\0\1\12\1\67\1\0\1\12\4\0"+
    "\1\71\1\0\1\12\10\0\1\4\12\0\3\12\1\157"+
    "\4\12\1\0\3\12\1\0\2\12\2\71\3\0\1\4"+
    "\1\12\1\4\1\12\1\65\1\70\2\12\6\0\1\71"+
    "\3\12\1\0\1\12\1\232\1\73\1\0\1\70\1\74"+
    "\1\12\1\0\1\12\1\67\1\0\1\12\4\0\1\71"+
    "\1\0\1\12\10\0\1\4\12\0\10\12\1\0\3\12"+
    "\1\0\2\12\2\71\3\0\1\4\1\12\1\4\1\12"+
    "\1\65\1\70\2\12\6\0\1\71\3\12\1\0\1\12"+
    "\1\101\1\73\1\0\1\70\1\74\1\12\1\0\1\12"+
    "\1\67\1\0\1\12\4\0\1\71\1\0\1\12\10\0"+
    "\1\4\12\0\10\12\1\0\2\12\1\157\1\0\2\12"+
    "\2\71\3\0\1\172\1\70\1\0\1\70\1\0\1\70"+
    "\1\173\1\70\6\0\3\70\1\233\1\0\3\70\1\0"+
    "\1\70\1\74\1\70\1\0\1\70\2\0\1\205\4\0"+
    "\1\70\1\0\1\70\23\0\1\70\1\176\1\70\1\177"+
    "\1\234\3\70\1\162\3\70\1\0\4\70\24\0\1\235"+
    "\53\0\1\215\17\0\1\4\1\12\1\4\1\12\1\65"+
    "\1\70\2\12\6\0\1\71\3\12\1\0\1\12\1\236"+
    "\1\73\1\0\1\70\1\74\1\12\1\0\1\12\1\67"+
    "\1\0\1\12\4\0\1\71\1\0\1\12\10\0\1\4"+
    "\12\0\7\12\1\157\1\237\3\12\1\0\2\12\2\71"+
    "\3\0\1\166\5\0\1\166\62\0\1\207\1\170\5\0"+
    "\1\240\16\0\1\241\4\0\1\241\177\0\1\170\120\0"+
    "\1\242\107\0\1\243\24\0\1\70\1\0\1\70\1\0"+
    "\3\70\6\0\4\70\1\0\3\70\1\0\1\70\1\74"+
    "\1\70\1\0\1\70\2\0\1\70\4\0\1\70\1\0"+
    "\1\70\23\0\1\244\7\70\1\0\3\70\1\0\4\70"+
    "\4\0\1\70\1\0\1\70\1\0\3\70\6\0\4\70"+
    "\1\0\1\70\1\245\1\70\1\0\1\70\1\74\1\70"+
    "\1\0\1\70\2\0\1\70\4\0\1\70\1\0\1\70"+
    "\23\0\4\70\1\234\1\246\2\70\1\202\3\70\1\0"+
    "\4\70\4\0\1\70\1\0\1\70\1\0\3\70\6\0"+
    "\4\70\1\0\3\70\1\0\1\70\1\74\1\70\1\0"+
    "\1\234\2\0\1\70\4\0\1\70\1\0\1\70\23\0"+
    "\10\70\1\0\1\234\2\70\1\0\4\70\4\0\1\70"+
    "\1\0\1\70\1\0\3\70\6\0\4\70\1\0\3\70"+
    "\1\0\1\70\1\74\1\70\1\0\1\70\2\0\1\70"+
    "\4\0\1\70\1\0\1\70\23\0\1\247\1\70\1\244"+
    "\5\70\1\0\3\70\1\0\4\70\4\0\1\70\1\0"+
    "\1\70\1\0\3\70\6\0\4\70\1\0\3\70\1\0"+
    "\1\70\1\74\1\70\1\0\1\70\2\0\1\250\4\0"+
    "\1\70\1\0\1\70\23\0\10\70\1\0\3\70\1\0"+
    "\4\70\4\0\1\200\1\0\1\200\2\0\2\200\6\0"+
    "\4\200\1\0\1\200\1\251\1\200\3\0\1\200\1\0"+
    "\1\200\2\0\1\200\4\0\1\200\1\0\1\200\23\0"+
    "\10\200\1\0\3\200\1\0\4\200\3\0\1\172\1\70"+
    "\1\0\1\70\1\0\1\70\1\173\1\70\6\0\4\70"+
    "\1\0\3\70\1\0\1\70\1\74\1\70\1\0\1\70"+
    "\2\0\1\205\4\0\1\70\1\0\1\70\23\0\1\70"+
    "\1\176\1\70\1\177\1\234\3\70\1\202\3\70\1\0"+
    "\4\70\100\0\1\215\43\0\1\252\50\0\1\215\3\0"+
    "\1\202\46\0\1\215\46\0\1\215\13\0\1\70\1\0"+
    "\1\70\1\0\3\70\6\0\4\70\1\0\3\70\1\0"+
    "\1\70\1\74\1\70\1\0\1\70\2\0\1\70\4\0"+
    "\1\70\1\0\1\70\23\0\5\70\1\246\2\70\1\0"+
    "\3\70\1\0\4\70\3\0\1\253\1\12\1\4\1\12"+
    "\1\254\1\70\1\255\1\12\6\0\1\71\3\12\1\0"+
    "\1\12\1\101\1\73\1\0\1\70\1\74\1\12\1\0"+
    "\1\12\1\67\1\0\1\12\4\0\1\71\1\0\1\12"+
    "\10\0\1\4\12\0\10\12\1\0\3\12\1\0\2\12"+
    "\2\71\4\0\1\70\1\0\1\70\1\0\3\70\6\0"+
    "\4\70\1\0\3\70\1\0\1\70\1\74\1\70\1\0"+
    "\1\70\2\0\1\70\4\0\1\70\1\0\1\70\23\0"+
    "\5\70\1\234\2\70\1\0\3\70\1\0\4\70\3\0"+
    "\1\172\1\70\1\0\1\70\1\0\1\70\1\173\1\70"+
    "\6\0\4\70\1\0\3\70\1\0\1\70\1\74\1\70"+
    "\1\0\1\70\2\0\1\174\4\0\1\70\1\0\1\70"+
    "\23\0\1\70\1\176\1\70\1\177\4\70\1\214\3\70"+
    "\1\0\4\70\41\0\1\203\102\0\1\166\70\0\1\4"+
    "\1\12\1\4\1\12\1\65\1\70\2\12\6\0\1\71"+
    "\3\12\1\0\1\12\1\256\1\73\1\0\1\70\1\74"+
    "\1\12\1\0\1\12\1\67\1\0\1\12\4\0\1\71"+
    "\1\0\1\12\10\0\1\4\12\0\10\12\1\0\3\12"+
    "\1\0\2\12\2\71\3\0\1\4\1\71\1\4\1\217"+
    "\1\65\1\70\1\217\1\71\6\0\2\71\1\217\1\71"+
    "\1\0\1\71\1\70\1\73\1\0\1\70\1\74\1\71"+
    "\1\0\1\71\1\67\1\106\1\71\1\0\1\106\2\0"+
    "\1\71\1\106\1\71\10\0\1\4\12\0\10\71\1\0"+
    "\3\71\1\0\4\71\104\0\1\221\5\0\1\215\114\0"+
    "\1\215\5\0\4\4\1\65\1\0\2\4\6\0\4\4"+
    "\1\0\1\4\1\166\1\66\3\0\1\4\1\0\1\4"+
    "\1\67\1\0\1\4\4\0\1\4\1\0\1\4\10\0"+
    "\1\4\12\0\10\4\1\0\3\4\1\0\4\4\3\0"+
    "\1\172\1\70\1\0\1\70\1\0\1\70\1\173\1\70"+
    "\6\0\4\70\1\0\3\70\1\0\1\70\1\74\1\70"+
    "\1\0\1\70\2\0\1\205\4\0\1\70\1\0\1\70"+
    "\23\0\1\70\1\176\1\70\1\177\4\70\1\221\3\70"+
    "\1\0\1\70\1\234\2\70\27\0\1\220\44\0\1\243"+
    "\7\0\1\221\5\0\1\215\6\0\1\70\1\0\1\70"+
    "\1\0\3\70\6\0\4\70\1\0\1\70\1\257\1\70"+
    "\1\0\1\70\1\74\1\70\1\0\1\70\2\0\1\70"+
    "\4\0\1\70\1\0\1\70\23\0\1\244\7\70\1\221"+
    "\3\70\1\0\1\70\1\234\2\70\27\0\1\220\54\0"+
    "\1\221\5\0\1\215\46\0\1\230\54\0\1\70\1\0"+
    "\1\70\1\0\3\70\5\0\1\206\1\231\3\70\1\0"+
    "\1\70\1\260\1\70\1\0\1\70\1\74\1\70\1\0"+
    "\1\70\2\0\1\70\4\0\1\231\1\0\1\70\13\0"+
    "\1\206\1\0\1\206\5\0\10\70\1\0\3\70\1\0"+
    "\2\70\2\231\4\0\1\70\1\0\1\70\1\0\3\70"+
    "\6\0\4\70\1\0\3\70\1\0\1\70\1\74\1\70"+
    "\1\0\1\70\2\0\1\70\4\0\1\70\1\0\1\70"+
    "\23\0\10\70\1\0\2\70\1\234\1\0\4\70\4\0"+
    "\1\70\1\0\1\70\1\0\3\70\6\0\4\70\1\0"+
    "\1\70\1\261\1\70\1\0\1\70\1\74\1\70\1\0"+
    "\1\70\2\0\1\70\4\0\1\70\1\0\1\70\23\0"+
    "\10\70\1\0\3\70\1\0\4\70\107\0\1\215\10\0"+
    "\1\172\1\70\1\0\1\70\1\0\1\70\1\173\1\70"+
    "\6\0\4\70\1\0\3\70\1\0\1\70\1\74\1\70"+
    "\1\0\1\70\2\0\1\205\4\0\1\70\1\0\1\70"+
    "\23\0\1\70\1\176\1\70\1\177\3\70\1\234\1\237"+
    "\3\70\1\0\4\70\103\0\1\215\17\0\1\262\111\0"+
    "\1\166\5\0\1\166\63\0\1\263\23\0\1\70\1\0"+
    "\1\70\1\0\3\70\6\0\4\70\1\0\3\70\1\0"+
    "\1\70\1\74\1\70\1\0\1\70\2\0\1\70\4\0"+
    "\1\70\1\0\1\70\23\0\4\70\1\234\3\70\1\202"+
    "\3\70\1\0\4\70\4\0\1\70\1\0\1\70\1\0"+
    "\3\70\6\0\4\70\1\0\3\70\1\0\1\70\1\74"+
    "\1\70\1\0\1\70\2\0\1\70\4\0\1\70\1\0"+
    "\1\70\23\0\6\70\1\244\1\70\1\0\3\70\1\0"+
    "\4\70\4\0\1\244\1\0\1\70\1\0\3\70\6\0"+
    "\4\70\1\0\3\70\1\0\1\70\1\74\1\70\1\0"+
    "\1\70\2\0\1\70\4\0\1\70\1\0\1\70\23\0"+
    "\10\70\1\0\3\70\1\0\4\70\4\0\1\70\1\0"+
    "\1\70\1\0\3\70\6\0\4\70\1\0\3\70\1\0"+
    "\1\70\1\74\1\70\1\0\1\70\2\0\1\70\4\0"+
    "\1\70\1\0\1\70\23\0\4\70\1\244\3\70\1\0"+
    "\3\70\1\0\4\70\4\0\1\264\1\0\1\264\2\0"+
    "\2\264\6\0\1\200\3\264\1\0\1\264\1\251\1\200"+
    "\3\0\1\264\1\0\1\264\2\0\1\264\4\0\1\200"+
    "\1\0\1\264\23\0\10\264\1\0\3\264\1\0\2\264"+
    "\2\200\100\0\1\215\3\0\1\202\13\0\4\4\1\254"+
    "\1\0\2\4\6\0\4\4\1\0\1\4\1\0\1\66"+
    "\3\0\1\4\1\0\1\4\1\67\1\0\1\4\4\0"+
    "\1\4\1\0\1\4\10\0\1\4\12\0\10\4\1\0"+
    "\3\4\1\0\4\4\3\0\1\166\5\0\1\166\13\0"+
    "\1\265\46\0\1\167\1\170\5\0\1\171\14\0\1\4"+
    "\1\12\1\4\1\12\1\254\1\70\2\12\6\0\1\71"+
    "\3\12\1\0\1\12\1\101\1\73\1\0\1\70\1\74"+
    "\1\12\1\0\1\12\1\67\1\0\1\12\4\0\1\71"+
    "\1\0\1\12\10\0\1\4\12\0\10\12\1\0\3\12"+
    "\1\0\2\12\2\71\3\0\1\172\1\266\1\0\1\266"+
    "\1\0\1\70\2\266\6\0\4\266\1\0\1\266\1\70"+
    "\1\266\1\0\1\70\1\74\1\266\1\0\1\266\2\0"+
    "\1\266\4\0\1\266\1\0\1\266\23\0\10\266\1\0"+
    "\3\266\1\0\4\266\4\0\1\70\1\0\1\70\1\0"+
    "\3\70\6\0\4\70\1\0\3\70\1\0\1\70\1\74"+
    "\1\70\1\0\1\70\2\0\1\70\4\0\1\70\1\0"+
    "\1\70\23\0\10\70\1\221\3\70\1\0\1\70\1\234"+
    "\2\70\4\0\1\70\1\0\1\70\1\0\3\70\6\0"+
    "\4\70\1\0\3\70\1\0\1\70\1\74\1\70\1\0"+
    "\1\70\2\0\1\70\4\0\1\267\1\0\1\70\23\0"+
    "\10\70\1\0\3\70\1\0\2\70\2\267\7\0\1\270"+
    "\210\0\1\170\15\0\1\271\1\0\1\271\2\0\2\271"+
    "\6\0\1\200\3\271\1\0\1\271\1\251\1\200\3\0"+
    "\1\271\1\0\1\271\2\0\1\271\4\0\1\200\1\0"+
    "\1\271\23\0\10\271\1\0\3\271\1\0\2\271\2\200"+
    "\25\0\1\272\73\0\1\266\1\0\1\266\1\273\1\70"+
    "\2\266\6\0\4\266\1\274\1\266\1\275\1\266\1\0"+
    "\1\70\1\74\1\266\1\0\1\266\2\0\1\266\4\0"+
    "\1\266\1\0\1\266\23\0\10\266\1\0\3\266\1\0"+
    "\4\266\4\0\1\70\1\0\1\70\1\0\3\70\6\0"+
    "\1\267\3\70\1\0\1\70\1\260\1\70\1\0\1\70"+
    "\1\74\1\70\1\0\1\70\2\0\1\70\4\0\1\267"+
    "\1\0\1\70\23\0\10\70\1\0\3\70\1\0\2\70"+
    "\2\267\4\0\1\276\1\0\1\276\1\0\3\276\6\0"+
    "\4\276\1\0\1\276\1\0\1\276\3\0\1\276\1\0"+
    "\1\276\2\0\1\276\4\0\1\276\1\0\1\276\23\0"+
    "\10\276\1\0\3\276\1\0\4\276\4\0\1\277\1\0"+
    "\1\277\2\0\2\277\6\0\1\200\3\277\1\0\1\277"+
    "\1\251\1\200\3\0\1\277\1\0\1\277\2\0\1\277"+
    "\4\0\1\200\1\0\1\277\23\0\10\277\1\0\3\277"+
    "\1\0\2\277\2\200\4\0\1\300\1\0\1\300\2\0"+
    "\2\300\6\0\4\300\1\0\1\300\1\0\1\300\3\0"+
    "\1\300\1\0\1\300\2\0\1\300\4\0\1\300\1\0"+
    "\1\300\23\0\10\300\1\0\3\300\1\0\4\300\21\0"+
    "\1\301\24\0\1\301\44\0\2\301\4\0\1\274\1\0"+
    "\5\274\6\0\16\274\1\0\4\274\2\0\3\274\1\0"+
    "\1\274\1\0\1\274\17\0\10\274\1\0\3\274\1\0"+
    "\4\274\4\0\1\266\1\0\1\266\1\0\1\70\2\266"+
    "\6\0\4\266\1\0\1\266\1\70\1\266\1\0\1\70"+
    "\1\74\1\266\1\0\1\266\2\0\1\266\4\0\1\266"+
    "\1\0\1\266\23\0\10\266\1\0\3\266\1\0\4\266"+
    "\4\0\1\276\1\0\1\276\1\0\3\276\1\302\5\0"+
    "\4\276\1\0\1\276\1\0\1\276\3\0\1\276\1\0"+
    "\1\276\2\0\1\276\4\0\1\276\1\0\1\276\23\0"+
    "\10\276\1\0\3\276\1\0\4\276\4\0\1\303\1\0"+
    "\1\303\2\0\2\303\6\0\1\200\3\303\1\0\1\303"+
    "\1\251\1\200\3\0\1\303\1\0\1\303\2\0\1\303"+
    "\4\0\1\200\1\0\1\303\23\0\10\303\1\0\3\303"+
    "\1\0\2\303\2\200\4\0\1\300\1\0\1\300\1\273"+
    "\1\0\2\300\6\0\4\300\1\274\1\300\1\272\1\300"+
    "\3\0\1\300\1\0\1\300\2\0\1\300\4\0\1\300"+
    "\1\0\1\300\23\0\10\300\1\0\3\300\1\0\4\300"+
    "\21\0\1\301\3\0\1\274\20\0\1\301\44\0\2\301"+
    "\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[12628];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\10\1\1\11\1\1\1\0\25\1\1\11"+
    "\7\1\3\11\6\1\2\0\1\1\2\0\1\1\1\0"+
    "\1\1\1\0\2\1\1\0\1\1\1\0\1\1\1\11"+
    "\2\0\2\1\1\0\1\1\1\0\1\1\3\0\4\1"+
    "\1\0\1\1\2\0\3\1\1\0\1\1\1\0\2\1"+
    "\2\0\1\1\1\0\1\1\2\0\1\1\1\0\2\1"+
    "\1\0\1\1\2\0\3\1\2\0\1\1\2\0\1\11"+
    "\1\0\2\1\14\0\4\1\3\0\3\1\2\0\2\1"+
    "\4\0\3\1\1\0\1\1\3\0\1\1\1\0\1\1"+
    "\1\11\1\1\6\0\1\1\1\0\1\1\3\0\1\1"+
    "\4\0\2\1\1\0\1\1\2\0\1\1\2\0\3\1"+
    "\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[195];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
public ArrayList<Token> readSentence() throws IOException {
    ArrayList<Token> sentence = new ArrayList<Token>();
    Token token, lastNonSpace = null, lastSpace = null;

    while((token = yylex()) != null) {
        if(token.isSpace()) {
            if(token.type == Token.TOK_NEWLINES) {
                if(!sentence.isEmpty()) return sentence;
            }
            lastSpace = token;
        } else {
            if(!sentence.isEmpty()) {
                if(lastNonSpace != null &&
                   lastNonSpace.value.endsWith(".") &&
                   lastNonSpace.value.length() > 1 &&
                   token.isCapitalized())
                {
                    yypushback(yylength());
                    return sentence;
                } else if(token.type == Token.TOK_SENT_FINAL) {
                    if(lastNonSpace != null &&
                       lastNonSpace.value.length() == 1 &&
                       lastNonSpace.isCapitalized())
                    {
                    } else {
                        sentence.add(token);
                        return sentence;
                    }
                }
            }
            sentence.add(token);
            lastNonSpace = token;
        }
    }
    if(sentence.isEmpty()) return null;
    return sentence;
}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public SwedishTokenizer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 538) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return(new Token(Token.TOK_UNKNOWN,yytext(),yychar));
            }
          case 22: break;
          case 2: 
            { return(new Token(Token.TOK_SYMBOL,yytext(),yychar));
            }
          case 23: break;
          case 3: 
            { return(new Token(Token.TOK_LATIN,yytext(),yychar));
            }
          case 24: break;
          case 4: 
            { return(new Token(Token.TOK_SPACE,yytext(),yychar));
            }
          case 25: break;
          case 5: 
            { return(new Token(Token.TOK_NEWLINE,yytext(),yychar));
            }
          case 26: break;
          case 6: 
            { return(new Token(Token.TOK_NUMBER,yytext(),yychar));
            }
          case 27: break;
          case 7: 
            { return(new Token(Token.TOK_SENT_FINAL,yytext(),yychar));
            }
          case 28: break;
          case 8: 
            { return(new Token(Token.TOK_DASH,yytext(),yychar));
            }
          case 29: break;
          case 9: 
            { return(new Token(Token.TOK_GREEK,yytext(),yychar));
            }
          case 30: break;
          case 10: 
            { return(new Token(Token.TOK_ARABIC,yytext(),yychar));
            }
          case 31: break;
          case 11: 
            { return(new Token(Token.TOK_NAGARI,yytext(),yychar));
            }
          case 32: break;
          case 12: 
            { return(new Token(Token.TOK_KANA,yytext(),yychar));
            }
          case 33: break;
          case 13: 
            { return(new Token(Token.TOK_HANGUL,yytext(),yychar));
            }
          case 34: break;
          case 14: 
            { return(new Token(Token.TOK_HANZI,yytext(),yychar));
            }
          case 35: break;
          case 15: 
            { return(new Token(Token.TOK_SMILEY,yytext(),yychar));
            }
          case 36: break;
          case 16: 
            { return(new Token(Token.TOK_SPACES,yytext(),yychar));
            }
          case 37: break;
          case 17: 
            { return(new Token(Token.TOK_NEWLINES,yytext(),yychar));
            }
          case 38: break;
          case 18: 
            { return(new Token(Token.TOK_SECTION,yytext(),yychar));
            }
          case 39: break;
          case 19: 
            { return(new Token(Token.TOK_URL,yytext(),yychar));
            }
          case 40: break;
          case 20: 
            { return(new Token(Token.TOK_EMAIL,yytext(),yychar));
            }
          case 41: break;
          case 21: 
            { yychar = -yylength();
                      sentID = yytext().substring(6, yylength()-1);
            }
          case 42: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
